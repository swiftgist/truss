#!/usr/bin/ruby -s

require 'csv'
require 'time'
require 'date'

# Correct/Remove invalid records
def preprocess(input)
  clean = []
  input.each do |line|
    if line.valid_encoding? then
      clean << line.rstrip
    else
      begin
        clean << line.encode('UTF-8', :invalid => :replace, :undef => :replace).rstrip
      rescue
        STDERR.puts "WARNING - Invalid encoding: " + line
      end

    end
  end
  clean.join("\n")
end

# Calculate seconds from H:M:S.MS format
def total_seconds(duration)
  h, m, s = duration.split(':').map(&:to_f) 
  3600 * h + 60 * m + s
end

# Contains a method for each CSV header to transform data as necessary
class Entry

  attr_accessor :row

  # Wrapper
  def normalize
    timestamp
    address
    zip
    fullname
    fooduration
    barduration
    totalduration
    notes
  end

  def timestamp
    dt = DateTime.strptime(@row[:timestamp], "%m/%d/%y %H:%M:%S %p")
    t = Time.parse(dt.to_s.sub!("+00", "-07")).utc
    @row[:timestamp] = t.to_datetime.new_offset('-04:00').to_s
  end

  def address
    # Preserve quotes
    @row[:address] = sprintf("\"%s\"", @row[:address]) if @row[:address].include?","
  end

  def zip
    @row[:zip] = sprintf("%05d", @row[:zip])
  end

  def fullname
    @row[:fullname].upcase!
  end

  def fooduration
    @row[:fooduration] = total_seconds(@row[:fooduration])
  end

  def barduration
    @row[:barduration] = total_seconds(@row[:barduration])
  end

  def totalduration
    @row[:totalduration] = @row[:fooduration] + @row[:barduration]
  end

  def notes
    if @row[:notes] and @row[:notes].include?"," then
      # Preserve quotes
      @row[:notes] = sprintf("\"%s\"", @row[:notes]) 
    end
  end

end

# main
if __FILE__ == $0
  # Print usage
  if $h then
    puts "Usage: normalize [-p] < [FILE]"
    puts "       normalize [-h]"
    puts "       -h   this help message"
    puts "       -p   display preprocessed data"
    exit
  end
  
  input = ARGF.readlines
  clean = preprocess(input)
  
  # Display preprocessed data
  if $p then
    puts clean
    exit
  end
  
  rows = []
  CSV.parse(clean, headers: true, header_converters: :symbol) do |row|
    entry = Entry.new
    # Convert csv row to hash with keyword symbols
    entry.row = row.to_h.each_with_object({}){ |(k,v), h| h[k.to_sym] = v }
    entry.normalize
    
    rows << entry.row
  end
  
  puts rows[0].keys.map{|header| header.capitalize}.join(',')
  rows.each {|row| puts row.values.join(',')}
end
